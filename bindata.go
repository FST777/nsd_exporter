// Code generated for package main by go-bindata DO NOT EDIT. (@generated)
// sources:
// config/config.yaml
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// Mode return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\x57\xc1\x6e\x1b\x37\x10\xbd\xeb\x2b\x06\xf1\x21\x09\x12\xaf\x2f\x85\x0f\xba\x19\x71\x5a\x14\x68\xed\xc0\x56\xd1\x1e\x04\x18\x14\x39\xab\x25\xcc\x25\x37\x33\xb3\x96\x94\xaf\x2f\x86\x5c\xd9\x56\xeb\x5d\xa9\xe8\xc9\x32\x87\x7c\xef\xf1\x71\x38\xc3\x6d\x51\xc8\x5b\x9e\xcf\xce\xe0\xe6\xfe\x1a\x7e\x2f\xff\xce\xce\x60\x61\x1e\x31\x42\x4d\xa9\x85\x46\xa4\xe3\xf9\xc5\x45\x64\x57\xb9\x64\xb9\x8a\x21\xa2\x04\xb3\xd2\x5f\x17\x18\x2f\x82\x11\x64\xb9\x68\x4d\xec\xcc\x1a\x59\x27\x9e\xdb\x14\x85\x52\xa8\x1a\x69\xc3\x19\x8b\x11\xcf\xe2\x2d\x9f\xdb\xd4\x47\x41\xe2\x19\x40\xec\xdb\xea\x7b\x8f\xe4\x91\xe7\x33\x00\x80\x06\x43\x37\x87\xf7\xb1\x6f\x57\x48\x90\x6a\x18\xa2\x40\x68\xd1\x3f\xa1\x83\x0f\xd2\x20\x88\xed\xc0\x44\x07\xbd\xeb\x9e\x67\x18\xe7\xd0\x41\xdf\x7d\xac\xde\x67\x28\xd9\x75\x38\x87\x81\x6c\x06\x20\xbe\xc5\x6a\x95\x92\x1c\x30\xf5\x9d\x8e\x83\x8f\xc0\x68\x53\x74\x0c\xec\xa3\x45\x50\x16\x46\x7a\x42\x82\x8d\x61\x60\x31\x24\xe8\x2a\xf8\xd3\x4b\x03\x35\x19\x2b\x3e\x45\x13\xf6\xab\x0e\x38\xd7\xa6\x5f\xe3\x9e\x11\x83\xe9\x18\xdd\x01\x69\xa6\x7c\xe1\x09\x86\x45\x19\x44\xb7\xd9\x25\x92\xcf\xaf\xf4\x0c\x94\xa7\x72\xb2\xff\x81\x95\x5b\x55\xce\xf3\xe3\x01\xa7\x06\xd4\xd0\x7c\x84\x2b\x48\x11\x74\x4a\x66\x5a\xed\x04\xa7\xd1\x5a\x6c\xdf\x04\x53\xf5\xd7\x37\xf7\xe0\x8c\x98\x95\xe1\xec\x63\x8b\x6d\xa2\xdd\x29\xc0\xdb\x9a\xdc\x28\x74\x81\x81\x3a\x11\xfc\x48\x11\x41\xc8\x44\xae\x91\x38\x1f\x7c\x4c\xe2\x6b\x3d\x75\x1f\x41\x61\xa0\xa3\x64\x91\xf9\x33\xe0\xd6\x86\xde\x21\xc3\xe2\xfe\xd7\x5f\xb2\xb0\x53\xa4\xd8\x14\x6b\xbf\x1e\x77\x4d\x25\x04\xcf\x02\xb5\x0f\xf8\x62\xde\x33\x99\x1a\xa1\xce\x2a\x4e\x46\xfc\x0f\xa4\x63\x0e\x94\x70\xde\xc2\x6b\x5f\x1f\xb1\x13\x90\x8d\xb7\x43\xd6\xe6\x1c\x55\x4f\x0e\x7d\x98\xa4\xd7\x7b\x87\x2e\x1e\xbb\x74\x1b\xcd\xbc\xaf\x7a\xc0\xb7\xdf\x16\x23\xd7\x6a\x0f\x85\x44\xc7\xd0\x1a\x6f\x1b\xa8\x8d\x0f\xe8\x0a\x6a\x67\x88\x71\x02\xb7\x77\xdd\x11\xcc\xa4\x9b\xff\xe3\xfa\x1b\xf8\xee\xa7\x69\xa0\xcb\xd3\x91\x2e\x27\x90\xc4\x8e\x49\xb2\x29\x46\xcc\x57\x74\x00\x5b\x7c\x39\x26\x4b\xec\xa8\xac\x11\xb4\x49\x69\x61\xec\x3c\xff\x0d\xf6\xdb\x7d\x96\x96\x7f\x3c\x17\x50\x42\xbd\x57\x7a\x2a\x92\x2b\x45\x51\x38\xcd\x78\xba\xfe\x4c\x79\x79\x12\xe5\xd4\x2e\x4d\xe4\x0d\xd2\xc3\x26\x3d\x18\x33\xc2\x5d\xa6\x0c\xe9\x7b\x73\xfb\xf5\xee\xee\xf6\x0e\xc8\x26\x87\xf9\x9e\xe8\x70\xea\x05\xae\xae\xa0\x0e\x66\xfd\x19\xa4\xf1\x5a\x48\x5e\x5d\x65\xc2\x1a\x89\x4c\xe0\x09\x21\xb4\x3d\x9e\xf2\x5a\xbd\x4a\xda\x17\xd4\xdc\xc3\x86\x2b\x30\xe5\xeb\x04\xf4\x7e\x73\x87\xd0\xb9\x3a\xb6\x5e\x8e\x63\x93\xd9\xd6\x63\xd8\x57\x7f\xfd\x7c\x07\x84\xdf\x7b\x64\xe1\xd2\xf9\x6d\xf0\x18\x85\xb5\xed\x1a\x81\x75\x92\x52\x71\x8a\x8b\xda\xae\xc2\x6e\xac\xe1\xe6\x9d\x50\x1f\xad\x91\x7f\xf4\xbf\x91\xa3\x5a\x7c\xc9\x07\x02\x8c\x32\x01\xe9\x28\x75\xdd\x28\xe0\xde\xf9\x2c\x77\x83\x84\x30\xcc\x87\x15\x5a\xd3\x73\xee\xb8\xbb\x7d\x15\x62\x13\xbd\xec\xc0\x36\x68\x1f\x47\x28\xb5\xf2\x57\xad\x61\xc1\x31\xd7\x4a\x30\x4f\xe4\xc1\x9d\x0a\x16\x0d\x32\xe6\xfc\x2e\xe3\x79\x83\x31\xc1\xbb\xc1\xde\xf3\x6d\x4d\xef\x00\xa3\xa8\xda\x29\x6a\x0e\xe6\x09\x47\x98\x73\xec\x14\xe2\xd3\x59\xcf\xf6\x0f\xc0\xe2\x60\xa3\x04\xc1\xac\x30\x30\x68\x83\x77\xda\xfb\x38\xb5\x9a\xcc\x6b\xdc\xc2\x93\x09\x3d\xea\x5b\xb1\x41\xb0\xa6\x93\x9e\x10\xd6\x94\xfa\x0e\x7c\x74\xb8\x05\x6e\x52\x1f\x1c\xb4\x46\x86\x44\x2d\xc3\xc3\xd3\x21\x03\x43\x34\x2d\x42\x1f\x1d\xd2\xc0\x34\xcb\x7f\x1e\x9e\x1f\xa6\xf9\xdc\x97\x95\x0a\x5d\x56\x1f\x96\x9b\x4f\x1f\x8b\x1f\xba\x70\xae\xb1\x07\x0d\xe5\xa1\x02\x50\xc2\x00\xe7\xf0\x1c\x98\xee\x71\xb9\x02\xe8\xc8\x2e\xaf\x18\xcf\xbe\x65\x95\x3a\x2d\x24\x23\x3a\x4a\xf0\x7f\x2b\x29\x30\x53\x2a\x6c\x30\xcc\x23\x22\x72\xec\x4d\x0d\x2f\x91\x93\xed\xc8\x4b\xa6\x94\xd0\x84\x1d\x34\xea\xc6\x4b\x64\xb4\x24\xe4\xfc\xb3\x86\xc8\xa3\x2b\x8a\x08\xa5\xa7\x08\x13\xde\x94\xd7\xd0\x87\xa5\xfb\xf4\x71\x79\xf8\x61\x51\x44\x95\xf8\xc3\x10\x79\x53\x59\x99\x32\x6d\x52\x63\xa2\xd3\xf2\xb1\xda\xbd\xfe\x4e\x18\x9e\x5e\x6f\x4a\xfb\x3b\x00\x00\xff\xff\x5f\xf8\x02\x7b\x65\x0d\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3429, mode: os.FileMode(420), modTime: time.Unix(1652704485, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
