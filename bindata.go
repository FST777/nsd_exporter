// Code generated by go-bindata.
// sources:
// config/config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\xd1\x6f\xdb\xb6\x13\xc7\xdf\xf3\x57\x1c\x9a\x1f\xd0\xe4\xd7\x46\x79\x19\xf2\x90\x97\xa1\x68\xbb\xa1\xc0\xd6\x16\x49\x86\x0d\x98\x8b\x80\x26\x4f\x16\x11\x8a\x64\xef\x4e\xb1\xdd\xbf\x7e\x20\x25\x27\x4e\x25\x7b\x92\x9b\x3d\x35\xbe\xa3\xee\x3e\xfc\x8a\x77\x3a\xb6\x46\x21\xab\xf9\xf2\xe8\x18\x3e\x5e\xbf\x83\xdf\xdb\x9f\x47\xc7\x70\xa3\xee\xd0\x43\x49\xa1\x86\x4a\x24\xf2\xe5\xf9\xb9\x67\x53\x98\xa0\xb9\xf0\xce\xa3\x38\x35\x4f\x7f\x9d\xa3\x3f\x77\x4a\x90\xe5\xbc\x56\x3e\xaa\x05\x72\x5a\x78\xa6\x83\x17\x0a\xae\xa8\xa4\x76\xc7\x2c\x4a\x2c\x8b\xd5\x7c\xa6\x43\xe3\x05\x89\x8f\x00\xc4\xd6\x58\xcc\x43\x90\xcb\x23\x00\x80\x0a\x5d\xbc\x84\x97\x4d\x4c\x76\xb0\x1e\x18\x75\xf0\x86\x81\xad\xd7\x08\x52\x21\x30\xd2\x3d\x12\x2c\x15\x03\x8b\x22\x41\x53\xc0\x9f\x56\x2a\x28\x49\x69\xb1\xc1\x2b\xb7\x79\xaa\x78\x99\x83\xca\x3a\xe2\x25\x2c\x54\xb3\xc0\x4d\x46\x74\x2a\x32\x9a\x27\x49\x73\xca\xc7\x3c\x4e\xb1\xa4\x0c\xc2\x40\x18\x03\xc9\xeb\x2d\x9e\x2e\xe5\xd8\x9c\x6c\xbf\x61\x61\xe6\x85\xb1\x7c\xf7\x24\x67\x72\x40\x28\x21\xcb\x3a\x87\xe0\x21\x2d\xc9\x99\xe6\x6b\xc1\xfd\xd1\x6a\xac\x07\x83\x25\xfa\x77\x1f\xaf\xc1\x28\x51\x73\xc5\x59\xc7\x1a\xeb\x40\xeb\x31\x81\x57\x25\x99\x9d\xa1\xdb\x30\x50\x06\x82\x6f\xc1\x23\x08\x29\xcf\x25\x12\x83\xf2\x06\x7c\x10\x5b\x5a\xe4\x94\x25\x85\x81\x48\x41\x23\xf3\x6b\xc0\x95\x76\x8d\x41\x86\x9b\xeb\x0f\xbf\x66\xb0\x31\x28\x3a\xf8\xd2\x2e\x76\xab\x96\x10\x9c\x65\x81\xd2\x3a\x7c\x14\xef\x21\x59\x12\x22\x29\x9b\xe2\xe4\x88\x13\x92\xee\x52\xa0\x75\xe7\x2d\x6c\xeb\x7a\x87\x51\x40\x96\x56\x77\xa7\x36\x9f\xd1\xa4\xc9\x53\x1d\xf6\xa6\x4f\xdb\x29\x6a\xc5\x82\xf4\x24\xb5\x6f\xea\x39\x52\x96\x3f\x3b\xf3\x42\x6e\x93\x98\x02\x6e\x2a\x64\x04\x45\xd8\xd9\x97\xe9\x64\xfa\x00\x2f\x08\xbf\x36\xc8\x72\xb6\x2a\xe9\x05\xa0\x17\xb2\xdf\x25\xee\xea\x70\x93\x9a\x9d\xba\xc7\x1d\x99\xb3\x6f\x4c\xe2\xc9\x59\x23\xd9\x5a\xd1\x7a\x47\xde\xce\xfb\x43\x5b\x86\x6b\x55\x23\x28\xde\x16\x78\xaf\x0e\xb9\x92\x77\x33\x3d\xf8\x0f\xd7\xe3\x29\x52\x16\x77\x90\xe8\x78\xd3\x8d\x41\x2a\x25\x50\xa5\x97\xe0\xd4\x1c\x1d\x43\xaa\x6c\x93\x0e\x3d\x87\x1a\x81\x70\x81\x2b\xb8\x57\xae\xc1\xd4\xb8\x2b\x04\xad\xa2\x34\x84\xb0\xa0\xd0\x44\xb0\xde\xe0\x0a\xb8\x0a\x8d\x33\x50\x2b\xd1\x55\xae\x8e\xd6\xdc\xf5\x8c\x1c\x18\x7c\x22\x6b\xbc\x41\xea\x32\x1d\xe5\x7f\x6e\x1f\xbe\x12\x00\x27\x7f\xcf\x96\xb3\xb3\x59\xf1\xe5\xff\xa7\xb3\xe2\x67\xdf\xd4\xb3\xe2\x6b\x83\x69\x63\xad\x62\x29\xc4\x25\xf8\xa6\xbe\xed\xcc\xd9\xda\x46\x6b\x57\x00\x9c\x81\x09\xb5\xb2\x7e\x58\xe2\xee\x39\x20\xd4\x68\xef\xd1\xc0\x49\x02\x14\x1d\x73\x4d\x35\x26\x3e\xac\x50\xc6\xa0\x81\x26\x9e\xee\x78\xa3\x3d\xd6\x02\x8d\xe7\xff\x7d\x0f\x9a\x8c\x07\x53\xe6\x17\xfd\x3e\xb5\xdc\x4f\x9f\x6f\x26\x71\x20\xd1\x10\x09\x12\x1d\x0e\x53\x59\x5d\x41\xa9\xac\x43\xd3\x42\x45\x45\x3c\x7c\xbc\x06\x5f\x65\x63\x62\x4f\x9e\xc6\xc4\x83\x81\x42\x6a\x85\x7f\xbc\xfb\x0c\x36\xfe\x34\x89\xe2\xa2\x47\x11\xcd\xc5\x73\x60\x5c\x8c\xc7\x10\xdd\x17\x43\xf4\x74\x31\x74\xf0\x1e\xf3\xa8\xd0\x91\xdc\xbc\x9d\x28\x88\xe8\xbe\x20\xc9\xf6\x5c\x28\x53\x44\x71\xfd\x02\x12\x37\xbd\x7e\xfa\x24\xbf\x5d\x67\x51\xf2\x1f\x0f\x15\x4e\x98\x26\x8b\x74\x8c\x25\xcf\x4a\x4d\x9d\xc4\x98\x84\xdb\x57\xce\xf1\x73\x28\x97\x79\x2f\x46\xf1\x4e\xd0\x57\x79\x5e\x22\xdd\x2e\xc3\xad\x52\xdf\x83\x6f\xfb\x26\x6f\xa0\x7d\xb8\x6b\x58\x1f\x3f\xbd\xbf\xba\xfa\x74\x05\xa4\x83\xc1\xdc\x57\x93\x39\x34\x02\x6f\xde\x40\xe9\xd4\xe2\x35\x48\x65\xd3\x30\xb7\x35\x4e\x11\x96\x48\xa4\xdc\xae\x4f\xfa\xc0\x6e\x68\x35\xd0\xe5\xb2\xf1\xe0\x5a\x4e\xf3\x67\xdb\xe7\x5a\xa6\xfc\x91\xe8\x7a\xde\x84\x73\x31\x04\x26\x07\x81\x6d\x84\x7d\x0a\x96\xa7\xe3\xda\xca\x64\x32\x52\xab\xb2\x2f\x59\x32\x4e\x26\x7b\xf3\xd7\x2f\x57\xd0\xcd\x20\xdc\xde\xe5\xb4\xb3\xe8\x85\xd3\x37\x55\x09\x2c\x82\x74\x13\x4c\x7b\x2c\x08\xa3\x5b\x8f\xfe\x9a\xce\x0a\xb2\x43\xac\xf6\x10\xd6\x0f\xff\x35\xab\x50\xe3\xb5\x92\xcd\xc5\x6f\xeb\xad\x6f\x1c\x3f\x56\x52\x37\x6f\x73\xe1\x00\xa3\x8c\x87\x32\x14\x62\xec\x23\x75\xe6\x83\x6b\x24\x0b\xb6\x44\x42\xe8\x22\xc1\x1c\xb5\x6a\x38\xdf\x6e\xd7\x9b\x01\x81\x95\xb7\xb2\x06\x5d\xa1\xbe\x9b\xa0\xe3\x3a\xe2\xac\x68\x1d\x5f\x5e\x9d\xf6\xd4\x5c\x47\xfc\x37\xee\xf4\xf3\x61\xdd\xfe\xc9\x2a\x77\xa1\x64\x59\xe7\x27\xc6\x63\x86\x98\x5a\xdb\xac\x38\x99\x2d\xfb\x90\xad\xf3\xb9\x31\xdb\xa8\xe3\x11\xb5\x53\xcc\x3b\x08\xb3\x6f\x0c\xe0\xe3\xc2\xd1\x42\xe6\x47\x26\x14\xf9\x1e\x21\x69\xac\x8e\x8f\x0b\x77\x56\x51\x3e\xb4\x5a\x11\x59\x34\x2d\x2e\xa1\x34\xe4\x61\x8f\xaa\xed\x65\xfb\x64\x66\x5e\x9d\x0e\xde\x43\x5a\xff\xde\xab\x48\xbb\x64\xbf\x82\x95\xf2\x26\x55\xcc\x7c\xbd\xfd\xdf\x50\xdd\xcd\x7e\x10\xed\x9f\x00\x00\x00\xff\xff\xf7\xde\xb3\x80\x58\x13\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 4952, mode: os.FileMode(420), modTime: time.Unix(1735162156, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

