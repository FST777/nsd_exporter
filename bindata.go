// Code generated by go-bindata.
// sources:
// config/config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x98\x51\x6f\xdb\x36\x10\xc7\xdf\xf3\x29\x0e\xcd\x80\x26\x6b\xa3\xbc\x0c\x79\xc8\xcb\x50\xb4\xdd\x50\x60\x6b\x8b\x24\xc3\x06\xcc\x43\x40\x93\x27\x8b\x08\x45\xb2\x77\xa7\xd8\xee\xa7\x1f\x48\xc9\x89\x53\xc9\x9e\xe4\x66\x4f\x8d\x8f\xd4\xfd\x7f\xfc\x8b\x77\x22\x5b\xa3\x90\xd5\x7c\x79\x74\x0c\x1f\xaf\xdf\xc1\xef\xed\xcf\xa3\x63\xb8\x51\x77\xe8\xa1\xa4\x50\x43\x25\x12\xf9\xf2\xfc\xdc\xb3\x29\x4c\xd0\x5c\x78\xe7\x51\x9c\x9a\xa7\xbf\xce\xd1\x9f\x3b\x25\xc8\x72\x5e\x2b\x1f\xd5\x02\x39\x4d\x3c\xd3\xc1\x0b\x05\x57\x54\x52\xbb\x63\x16\x25\x96\xc5\x6a\x3e\xd3\xa1\xf1\x82\xc4\x47\x00\x62\x6b\x2c\xe6\x21\xc8\xe5\x11\x00\x40\x85\x2e\x5e\xc2\xcb\x26\xa6\x38\x58\x0f\x8c\x3a\x78\xc3\xc0\xd6\x6b\x04\xa9\x10\x18\xe9\x1e\x09\x96\x8a\x81\x45\x91\xa0\x29\xe0\x4f\x2b\x15\x94\xa4\xb4\xd8\xe0\x95\xdb\x3c\x55\xbc\xcc\x49\x65\x1d\xf1\x12\x16\xaa\x59\xe0\x46\x11\x9d\x8a\x8c\xe6\x89\x68\x96\x7c\xd4\x71\x8a\x25\x29\x08\x03\x61\x0c\x24\xaf\xb7\x78\x3a\xc9\xb1\x9a\x6c\xbf\x62\x61\xe6\x85\xb1\x7c\xf7\x44\x33\x0d\x40\x28\x21\xdb\x3a\x87\xe0\x21\x4d\xc9\x4a\xf3\xb5\xe0\xfe\x6c\x35\xd6\x83\xc9\x12\xfd\xbb\x8f\xd7\x60\x94\xa8\xb9\xe2\xec\x63\x8d\x75\xa0\xf5\x98\xc4\xab\x92\xcc\xce\xd4\x6d\x1a\x28\x03\xc1\xd7\xe0\x11\x84\x94\xe7\x12\x89\x41\x79\x03\x3e\x88\x2d\x2d\x72\x52\x49\x69\x20\x52\xd0\xc8\xfc\x1a\x70\xa5\x5d\x63\x90\xe1\xe6\xfa\xc3\xaf\x19\x6c\x0c\x8a\x0e\xbe\xb4\x8b\xdd\xae\x25\x04\x67\x59\xa0\xb4\x0e\x1f\xcd\x7b\x10\x4b\x46\x24\x67\x53\x9e\x9c\x71\x82\xe8\x2e\x07\xda\xe1\xbc\x84\x6d\x5f\xef\x30\x0a\xc8\xd2\xea\x6e\xd7\xe6\x3d\x9a\x3c\x79\xea\xc3\x5e\xf9\xb4\x9c\xa2\x56\x2c\x48\x4f\xa4\x7d\x53\xcf\x91\xb2\xfd\x79\x30\x4f\xe4\x56\xc4\x14\x70\x53\x21\x23\x28\xc2\x2e\xbe\x4c\x3b\xd3\x07\x78\x41\xf8\xa5\x41\x96\xb3\x55\x49\x2f\x00\xbd\x90\xfd\x46\xb8\xab\xc3\x8d\x34\x3b\x75\x8f\x3b\x94\xf3\xd8\x18\xe1\xc9\xaa\x91\x6c\xad\x68\xbd\x43\xb7\x1b\xfd\xae\x25\xc3\xb5\xaa\x11\x14\x6f\x1b\xbc\xd7\x87\x5c\xc9\xbb\x99\x1e\xc6\x0f\xf7\xe3\x29\x52\x36\x77\x90\xe8\x78\xd3\x8d\x41\x2a\x25\x50\xa5\x97\xe0\xd4\x1c\x1d\x43\xaa\x6c\x93\x36\x3d\x87\x1a\x81\x70\x81\x2b\xb8\x57\xae\xc1\xd4\xb8\x2b\x04\xad\xa2\x34\x84\xb0\xa0\xd0\x44\xb0\xde\xe0\x0a\xb8\x0a\x8d\x33\x50\x2b\xd1\x55\xae\x8e\x36\xdc\xf5\x8c\x9c\x18\x7c\x22\x6b\xbc\x41\xea\x94\x8e\xf2\x3f\xb7\x0f\x5f\x09\x80\x93\xbf\x67\xcb\xd9\xd9\xac\xf8\xe7\xc7\xd3\x59\xf1\xb3\x6f\xea\x59\xf1\xa5\xc1\xb4\xb0\xd6\xb1\x94\xe2\x12\x7c\x53\xdf\x76\xe1\x1c\x6d\xb3\xb5\x33\x00\xce\xc0\x84\x5a\x59\x3f\x6c\x71\xf7\x1c\x10\x6a\xb4\xf7\x68\xe0\x24\x01\x8a\x8e\xb9\xa6\x1a\x13\x1f\x66\x28\x63\xd0\x40\x13\x4f\x77\xbc\xd1\x1e\x6b\x81\xc6\xf3\x0f\xdf\x82\xa6\xe0\xc1\x94\xf9\x45\xbf\x4f\x2d\xf7\xd3\xe7\x9b\x49\x1c\x48\x34\x44\x82\x44\x87\xc3\x54\x56\x57\x50\x2a\xeb\xd0\xb4\x50\x51\x11\x0f\x6f\xaf\xc1\x57\xd9\x98\xd8\xb3\xa7\x31\xf1\x60\xa0\x90\x5a\xe1\x1f\xef\x3e\x83\x8d\x3f\x4d\xa2\xb8\xe8\x51\x44\x73\xf1\x1c\x18\x17\xe3\x31\x44\xf7\xcd\x10\x3d\xdd\x0c\x1d\xbc\xc7\x7c\x54\xe8\x48\x6e\xde\x4e\x34\x44\x74\xdf\x90\x14\x7b\x2e\x94\x29\xa6\xb8\x7e\x01\x89\x9b\x5e\x3f\x7d\x92\xdf\xae\xb3\x29\xf9\x8f\x87\x0a\x27\x4c\x27\x8b\xb4\x8d\x25\x9f\x95\x9a\x3a\x99\x31\x09\xb7\xef\x9c\xe3\xe7\x70\x2e\xf3\x5e\x8c\xe2\x9d\xe0\xaf\xf2\xbc\x44\xba\x5d\x86\x5b\xa5\xbe\x05\xdf\x1e\x9b\xbc\x80\xf6\xe1\xae\x61\x7d\xfc\xf4\xfe\xea\xea\xd3\x15\x90\x0e\x06\x73\x5f\x4d\xe1\xd0\x08\xbc\x79\x03\xa5\x53\x8b\xd7\x20\x95\x4d\x87\xb9\xad\xe3\x14\x61\x89\x44\xca\xed\xfa\xa4\x0f\xac\x86\x56\x03\x5d\x2e\x07\x0f\xae\xe5\x74\xfe\x6c\xfb\x5c\xcb\x94\x3f\x12\x5d\xcf\x9b\xb0\x2f\x86\xc0\xe4\x20\xb0\x8d\xb1\x4f\xc1\xf2\xe9\xb8\xb6\x32\x99\x8c\xd4\xaa\xec\x5b\x96\x82\x93\xc9\xde\xfc\xf5\xcb\x15\x74\x67\x10\x6e\xef\x72\xda\x59\xf4\xc2\xe9\x9b\xaa\x04\x16\x41\xba\x13\x4c\xbb\x2d\x08\xa3\x5b\x8f\xfe\x9a\xce\x0a\xb2\x43\xac\xf6\x10\xd6\x0f\xff\x37\xab\x50\xe3\xb5\x92\xcd\xc5\x6f\xeb\xad\x6f\x06\xbe\xaf\xa4\x6e\xde\xe6\xc2\x01\x46\x19\x0f\x65\x28\xc4\xd8\x47\xea\xc2\x07\xd7\x48\x36\x6c\x89\x84\xd0\x65\x82\x39\x6a\xd5\x70\xbe\xdd\xae\x37\x07\x04\x56\xde\xca\x1a\x74\x85\xfa\x6e\x82\x8f\xeb\x88\xb3\xe2\x24\xc5\x5f\x9d\xf6\xbc\x5c\x47\xfc\x2f\xea\xf4\xf3\x61\xde\xfe\x73\x55\xee\x41\x29\xb2\xce\x4f\x8c\x87\x0c\x31\x35\xb6\x8c\xd9\x87\x6c\x07\x9f\x1b\xb3\xcd\x3a\x1e\x51\x3b\xc5\xbc\x83\x30\x8f\x8d\x01\x7c\x9c\x38\xda\xc8\xfc\xc8\x84\x12\xdf\x63\x24\x8d\xf5\xf1\x71\xe2\xce\x1a\xca\x5b\x56\x2b\x22\x8b\xa6\xc5\x25\x94\x86\x3c\xec\x71\xb5\xbd\x6a\x9f\xcc\xcc\xab\xd3\xc1\x5b\x48\x3b\xbe\xf7\x22\xd2\x4e\xd9\xef\x60\xa5\xbc\x49\xf5\x32\x5f\x6f\xff\x27\x54\x77\xaf\x1f\x44\xfb\x37\x00\x00\xff\xff\x31\x4e\xec\x08\x56\x13\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 4950, mode: os.FileMode(420), modTime: time.Unix(1735161475, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

