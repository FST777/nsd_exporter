// Code generated by go-bindata.
// sources:
// config/config.yaml
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _configYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x57\xc1\x6e\x1b\x37\x10\xbd\xeb\x2b\x06\xf1\x21\x36\x62\xaf\x2f\x85\x0f\xba\x19\x71\x5a\x04\x68\xed\xc0\x56\xd1\x1e\x04\x18\x14\x39\xab\x25\xcc\x25\x37\x33\xb3\x96\x94\xaf\x2f\x48\xae\x64\xab\x35\x57\x4a\x93\x93\x65\x0e\xf9\xde\xe3\x23\x67\x38\xdb\xa2\x90\xd5\x3c\x9d\x9c\xc0\xed\xc3\x0d\xfc\x91\xff\x9d\x9c\xc0\x4c\x3d\xa1\x87\x9a\x42\x0b\x8d\x48\xc7\xd3\xcb\x4b\xcf\xa6\x32\x41\x73\xe5\x9d\x47\x71\x6a\x11\x7f\x5d\xa2\xbf\x74\x4a\x90\xe5\xb2\x55\xbe\x53\x4b\xe4\x38\xf1\x42\x07\x2f\x14\x5c\xd5\x48\xeb\x4e\x58\x94\x58\x16\xab\xf9\x42\x87\xde\x0b\x12\x4f\x00\x7c\xdf\x56\x5f\x7b\x24\x8b\x3c\x9d\x00\x00\x34\xe8\xba\x29\xbc\xf7\x7d\xbb\x40\x82\x50\xc3\x10\x05\x42\x8d\xf6\x19\x0d\x9c\x4a\x83\x20\xba\x03\xe5\x0d\xf4\xa6\xdb\xcd\x50\xc6\xa0\x81\xbe\x3b\xab\xde\x27\x28\xd9\x74\x38\x85\x81\x6c\x02\x20\xb6\xc5\x6a\x11\x82\xec\x31\xf5\x5d\x1c\x07\xeb\x81\x51\x07\x6f\x18\xd8\x7a\x8d\x10\x59\x18\xe9\x19\x09\x56\x8a\x81\x45\x91\xa0\xa9\xe0\x2f\x2b\x0d\xd4\xa4\xb4\xd8\xe0\x95\xdb\xae\xda\xe3\x5c\xaa\x7e\x89\x5b\x46\x74\xaa\x63\x34\x7b\xa4\x89\xf2\x85\xc7\x29\x96\xc8\x20\x71\x9b\x5d\x20\x39\x7f\xa5\x67\xa0\x3c\x96\x93\xed\x37\xac\xcc\xa2\x32\x96\x9f\xf6\x38\x63\x20\x1a\x9a\x8e\x70\x01\xc1\x43\x9c\x92\x98\x16\x1b\xc1\x71\xb4\x16\xdb\x37\xc1\xa2\xfa\x9b\xdb\x07\x30\x4a\xd4\x42\x71\xf2\xb1\xc5\x36\xd0\xe6\x18\xe0\x75\x4d\xa6\x08\x9d\x61\xa0\x0e\x04\xdf\x82\x47\x10\x52\x9e\x6b\x24\x4e\x07\xef\x83\xd8\x3a\x9e\xba\xf5\x10\x61\xa0\xa3\xa0\x91\xf9\x1c\x70\xad\x5d\x6f\x90\x61\xf6\xf0\xf9\xb7\x24\xec\x18\x29\x3a\xf8\xda\x2e\xcb\xae\x45\x09\xce\xb2\x40\x6d\x1d\xbe\x98\xb7\x23\x8b\x46\x44\x67\x23\x4e\x42\xfc\x0e\xd2\x92\x03\x39\x9c\xb6\xf0\xda\xd7\x27\xec\x04\x64\x65\xf5\x70\x6b\xd3\x1d\x8d\x9e\xec\xfb\x30\x4a\x1f\xf3\x0e\x8d\x3f\x94\x74\xab\x78\xf3\x3e\xc5\x03\xbe\xfb\x32\x2b\xa4\xd5\x16\x0a\x89\x0e\xa1\x35\x56\x37\x50\x2b\xeb\xd0\x64\xd4\x4e\x11\xe3\x08\x6e\x6f\xba\x03\x98\x21\x6e\xfe\xcf\x9b\x2f\x60\xbb\x5f\xc6\x81\xae\x8e\x47\xba\x1a\x41\x12\x5d\x92\xa4\x83\xf7\x98\x52\x74\x00\x9b\x7d\x3c\x24\x4b\x74\x51\x56\x01\x6d\x54\x9a\x2b\x9d\xe7\x7f\xc1\x7e\x7f\x48\xd2\xd2\x8f\x5d\x01\x25\x8c\x79\x15\x4f\x45\x52\xa5\xc8\x0a\xc7\x19\x8f\xd7\x9f\x28\xaf\x8e\xa2\x1c\xdb\xa5\xf2\xbc\x42\x7a\x5c\x85\x47\xa5\x0a\xdc\x79\xca\x70\x7d\x6f\xef\x3e\xdd\xdf\xdf\xdd\x03\xe9\x60\x30\xe5\x49\x1c\x0e\xbd\xc0\xf5\x35\xd4\x4e\x2d\xcf\x41\x1a\x1b\x0b\xc9\xab\x54\x26\xac\x91\x48\x39\x1e\x11\x42\xeb\xc3\x57\x3e\x56\xaf\x7c\xed\x33\x6a\x7a\xc3\x86\x14\x18\xf3\x75\x04\x7a\xbb\xb9\x7d\xe8\x54\x1d\x5b\x2b\x87\xb1\x49\xad\xeb\x12\xf6\xf5\xdf\xbf\xde\x03\xe1\xd7\x1e\x59\x38\xbf\xfc\xda\x59\xf4\xc2\xf1\xd9\x55\x02\xcb\x20\xb9\xe2\x64\x17\xe3\x73\xe5\x36\xa5\x07\x37\xb1\xd9\x32\xdb\xe7\x9f\xce\x26\xd4\x7b\xad\xe4\x5f\xaf\x6d\xe1\x62\xcc\x3e\xa6\xe3\x07\x46\x19\x81\x34\x14\xba\xae\x08\xb8\x3d\xe7\x24\x77\x85\x84\x30\xcc\x87\x05\x6a\xd5\x73\x7a\xdf\x37\xdb\x9a\xc7\xca\x5b\xd9\x80\x6e\x50\x3f\x15\x28\xe3\x3b\x53\xb5\x8a\x05\x4b\xae\xe5\x60\x9a\xc8\x83\x3b\x15\xcc\x1a\x64\x4c\xd9\x94\xc7\xd3\x06\x7d\x80\x77\x83\xbd\x17\xeb\x9a\xde\x01\x7a\x89\x6a\xc7\xa8\xd9\xa9\x67\x2c\x30\xa7\xd8\x31\xc4\xdf\xcd\xda\x91\x6d\x15\x6d\x0a\xbc\x43\xf4\x87\xb6\x0c\x0f\xaa\x45\x50\xfc\xda\xe0\x51\x1f\x52\x8b\x55\xd6\xb4\x8b\xff\x7f\x3f\xf6\x25\x25\x73\xdf\x54\x74\xb2\x6d\xc9\xf3\x2d\x6b\xe2\x21\x38\xb5\x40\xc7\x10\x5b\x2e\x13\xbb\x11\x0e\x6d\x2c\x2f\x4b\x5c\xc3\xb3\x72\x3d\xc6\xee\xbd\x41\xd0\xaa\x93\x9e\x10\x96\x14\xfa\x0e\xac\x37\xb8\x06\x6e\x42\xef\x0c\xb4\x4a\x86\xd2\x91\x87\x87\x66\x2e\x01\x83\x8f\xca\x7a\x6f\x90\x06\xa6\x49\xfa\xf3\xb8\xfb\x54\x48\xb9\x31\xaf\xa2\xd0\x79\x75\x3a\x5f\x7d\x38\xcb\x3e\xc5\x85\xd3\x18\x7b\x8c\xa1\x34\x94\x01\x72\x18\xe0\x02\x76\x81\xf1\xae\x23\xd5\xe4\x38\xb2\x49\x2b\xca\x19\x3a\xaf\x42\x17\x4b\x7b\x41\x47\x0e\xfe\xb0\x92\x0c\x33\xa6\x42\x3b\xc5\x5c\x10\x91\x62\x6f\x6a\x78\x89\x1c\x6d\x47\x5a\x32\xa6\x84\x46\xec\xa0\xa2\x1b\x2f\x91\x62\xd9\x4c\xf7\x4f\x2b\x22\x8b\x26\x2b\x22\x94\x9e\x3c\x8c\x78\x93\xfb\xd3\xd3\xb9\xf9\x70\x36\xdf\xff\xd4\xcb\xa2\x72\xfc\x71\x88\xbc\xa9\x2c\x4f\x19\x37\xa9\x51\xde\xc4\x12\xbb\xd8\xbc\xfe\x72\x1b\x9a\xe1\x37\xa5\xfd\x13\x00\x00\xff\xff\xf6\x28\xcc\xa6\xf7\x0e\x00\x00")

func configYamlBytes() ([]byte, error) {
	return bindataRead(
		_configYaml,
		"config.yaml",
	)
}

func configYaml() (*asset, error) {
	bytes, err := configYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "config.yaml", size: 3831, mode: os.FileMode(420), modTime: time.Unix(1735032321, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"config.yaml": configYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"config.yaml": &bintree{configYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

